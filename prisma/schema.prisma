// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  children      Children[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// The `Children` model represents the children in the system, linked to a teacher.
// Dob is stored inplace of age

model Children {
  id          String   @id @default(uuid()) @db.UniqueIdentifier
  name        String   @db.Text
  rollno      String   @db.Text
  dateOfBirth DateTime @db.Date
  createdAt   DateTime @default(now()) @db.DateTime2
  updatedAt   DateTime @default(now()) @db.DateTime2
  gender      String   @db.VarChar(10)
  teacherId   String
  teacher     User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  testsTaken  Int?     @default(0) @db.Int

  visualTests     VisualTestResult[]     @relation("ChildrenVisualTests")
  vocabularyTests VocabularyTestResult[] @relation("ChildrenVocabularyTests")

  @@map("children")
}

model VisualTestResult {
  id        String   @id @default(uuid()) @db.UniqueIdentifier
  childId   String?  @db.UniqueIdentifier
  createdAt DateTime @default(now()) @db.DateTime2
  testName  String?  @default("Visual Discrimination Test")
  options   String // JSON string representing the options array
  score     Decimal? @db.Decimal(5, 2)

  child Children? @relation("ChildrenVisualTests", fields: [childId], references: [id], onDelete: Cascade)

  @@map("visual_test_results")
}

model VocabularyTestResult {
  id        String   @id @default(uuid()) @db.UniqueIdentifier
  createdAt DateTime @default(now()) @db.DateTime2
  childId   String?  @db.UniqueIdentifier
  responses String? // JSON string representing responses
  score     Decimal? @db.Decimal(5, 2)
  testName  String?  @db.Text

  child Children? @relation("ChildrenVocabularyTests", fields: [childId], references: [id])

  @@map("vocabulary_test_results")
}
