import { motion } from "framer-motion";
import { Lightbulb, Volume2, Mic, Type, CheckCircle } from "lucide-react";

const PracticeInstructions = ({ onStartPractice, t, language }) => {
  const instructions = [
    {
      icon: <Volume2 className="h-6 w-6" />,
      title: "Listen to the Word",
      description: "We'll show you a word on the screen. Read it carefully and think about what it means.",
      title_ta: "роЪрпКро▓рпНро▓рпИроХрпН роХрпЗро│рпБроЩрпНроХро│рпН",
      description_ta: "роиро╛роЩрпНроХро│рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роТро░рпБ роЪрпКро▓рпНро▓рпИроХрпН роХро╛роЯрпНроЯрпБро╡рпЛроорпН. роЕродрпИ роХро╡ройрооро╛роХрокрпН рокроЯро┐родрпНродрпБ роЕродройрпН рокрпКро░рпБро│рпИрокрпН рокро▒рпНро▒ро┐ ропрпЛроЪро┐ропрпБроЩрпНроХро│рпН.",
      title_hi: "рд╢рдмреНрдж рдХреЛ рд╕реБрдиреЗрдВ",
      description_hi: "рд╣рдо рдЖрдкрдХреЛ рд╕реНрдХреНрд░реАрди рдкрд░ рдПрдХ рд╢рдмреНрдж рджрд┐рдЦрд╛рдПрдВрдЧреЗред рдЗрд╕реЗ рдзреНрдпрд╛рди рд╕реЗ рдкрдврд╝реЗрдВ рдФрд░ рд╕реЛрдЪреЗрдВ рдХрд┐ рдЗрд╕рдХрд╛ рдХреНрдпрд╛ рдорддрд▓рдм рд╣реИред"
    },
    {
      icon: <Type className="h-6 w-6" />,
      title: "Type Your Answer",
      description: "Type what you think the word means in the text box. Don't worry about perfect spelling!",
      title_ta: "роЙроЩрпНроХро│рпН рокродро┐ро▓рпИродрпН родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН",
      description_ta: "роЪрпКро▓рпНро▓ро┐ройрпН рокрпКро░рпБро│рпН роОройрпНройро╡рпЖройрпНро▒рпБ роирпАроЩрпНроХро│рпН роиро┐ройрпИроХрпНроХро┐ро▒рпАро░рпНроХро│рпЛ роЕродрпИ роЙро░рпИрокрпНрокрпЖроЯрпНроЯро┐ропро┐ро▓рпН родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН. роЪро░ро┐ропро╛рой роОро┤рпБродрпНродрпБрокрпНрокро┐ро┤рпИ рокро▒рпНро▒ро┐ роХро╡ро▓рпИрокрпНрокроЯ ро╡рпЗрогрпНроЯро╛роорпН!",
      title_hi: "рдЕрдкрдирд╛ рдЙрддреНрддрд░ рдЯрд╛рдЗрдк рдХрд░реЗрдВ",
      description_hi: "рдЖрдкрдХреЛ рд▓рдЧрддрд╛ рд╣реИ рдХрд┐ рд╢рдмреНрдж рдХрд╛ рдХреНрдпрд╛ рдорддрд▓рдм рд╣реИ, рдЙрд╕реЗ рдЯреЗрдХреНрд╕реНрдЯ рдмреЙрдХреНрд╕ рдореЗрдВ рдЯрд╛рдЗрдк рдХрд░реЗрдВред рд╕рд╣реА рд╕реНрдкреЗрд▓рд┐рдВрдЧ рдХреА рдЪрд┐рдВрддрд╛ рди рдХрд░реЗрдВ!"
    },
    {
      icon: <Mic className="h-6 w-6" />,
      title: "Or Speak Your Answer",
      description: "You can also click the microphone button and speak your answer out loud!",
      title_ta: "роЕро▓рпНро▓родрпБ роЙроЩрпНроХро│рпН рокродро┐ро▓рпИроЪрпН роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН",
      description_ta: "роирпАроЩрпНроХро│рпН роорпИроХрпНро░рпЛроГрокрпЛройрпН рокрпКродрпНродро╛ройрпИроХрпН роХро┐ро│ро┐роХрпН роЪрпЖропрпНродрпБ роЙроЩрпНроХро│рпН рокродро┐ро▓рпИ роЙро░роХрпНроХроЪрпН роЪрпКро▓рпНро▓ро▓ро╛роорпН!",
      title_hi: "рдпрд╛ рдЕрдкрдирд╛ рдЙрддреНрддрд░ рдмреЛрд▓реЗрдВ",
      description_hi: "рдЖрдк рдорд╛рдЗрдХреНрд░реЛрдлреЛрди рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдХреЗ рдЕрдкрдирд╛ рдЙрддреНрддрд░ рдЬреЛрд░ рд╕реЗ рднреА рдмреЛрд▓ рд╕рдХрддреЗ рд╣реИрдВ!"
    },
    {
      icon: <CheckCircle className="h-6 w-6" />,
      title: "Get Feedback",
      description: "We'll tell you if your answer is correct and help you if you need it!",
      title_ta: "роХро░рпБродрпНродрпБроХрпНроХро│рпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН",
      description_ta: "роЙроЩрпНроХро│рпН рокродро┐ро▓рпН роЪро░ро┐ропро╛ройродро╛ роОройрпНро▒рпБ роиро╛роЩрпНроХро│рпН роЙроЩрпНроХро│рпБроХрпНроХрпБроЪрпН роЪрпКро▓рпНро╡рпЛроорпН, родрпЗро╡рпИрокрпНрокроЯрпНроЯро╛ро▓рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡рпБро╡рпЛроорпН!",
      title_hi: "рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
      description_hi: "рд╣рдо рдЖрдкрдХреЛ рдмрддрд╛рдПрдВрдЧреЗ рдХрд┐ рдЖрдкрдХрд╛ рдЙрддреНрддрд░ рд╕рд╣реА рд╣реИ рдпрд╛ рдирд╣реАрдВ рдФрд░ рдпрджрд┐ рдЖрдкрдХреЛ рдЗрд╕рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИ рддреЛ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХрд░реЗрдВрдЧреЗ!"
    }
  ];

  const getLocalizedText = (item, key) => {
    if (language === "ta" && item[`${key}_ta`]) return item[`${key}_ta`];
    if (language === "hi" && item[`${key}_hi`]) return item[`${key}_hi`];
    return item[key];
  };

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-8"
      >
        <motion.div
          className="inline-flex items-center gap-2 bg-blue-500/20 px-4 py-2 rounded-full text-blue-200 text-sm mb-4"
          animate={{ scale: [1, 1.05, 1] }}
          transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
        >
          <Lightbulb className="h-4 w-4" />
          How to Take the Test
        </motion.div>

        <h2 className="text-3xl font-bold text-white mb-3">
          Let's Learn How This Works!
        </h2>

        <p className="text-white/80 max-w-2xl mx-auto text-lg">
          Before we start, let me show you how to take this vocabulary test. It's easy and fun!
        </p>
      </motion.div>

      {/* Instructions Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8 flex-1">
        {instructions.map((instruction, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.2 }}
            className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20 hover:bg-white/15 transition-all duration-300"
          >
            <div className="flex items-start gap-4">
              <motion.div
                className="flex-shrink-0 w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center text-blue-300"
                whileHover={{ scale: 1.1, rotate: 5 }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                {instruction.icon}
              </motion.div>
              <div className="flex-1">
                <h3 className="text-white font-semibold text-lg mb-2">
                  {getLocalizedText(instruction, "title")}
                </h3>
                <p className="text-white/70 text-sm leading-relaxed">
                  {getLocalizedText(instruction, "description")}
                </p>
              </div>
            </div>
          </motion.div>
        ))}
      </div>

      {/* Example Section */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.8 }}
        className="bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-xl p-6 border border-purple-400/30 mb-8"
      >
        <div className="text-center">
          <h3 className="text-white font-semibold text-lg mb-3">
            Example: If we show you the word "CAT"
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div className="text-green-200">
              тЬЕ "A small furry animal"
            </div>
            <div className="text-green-200">
              тЬЕ "Pet that says meow"
            </div>
            <div className="text-green-200">
              тЬЕ "Animal with whiskers"
            </div>
          </div>
        </div>
      </motion.div>

      {/* Start Button */}
      <div className="text-center">
        <motion.button
          onClick={onStartPractice}
          className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold py-4 px-8 rounded-xl text-lg transition-all duration-300 shadow-lg"
          whileHover={{ scale: 1.05, boxShadow: "0 0 30px rgba(59, 130, 246, 0.5)" }}
          whileTap={{ scale: 0.95 }}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 1 }}
        >
          ЁЯОп Start Practice Round
        </motion.button>

        <motion.p
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1.2 }}
          className="text-white/60 text-sm mt-3"
        >
          Don't worry, this is just for practice!
        </motion.p>
      </div>
    </div>
  );
};

export default PracticeInstructions;
